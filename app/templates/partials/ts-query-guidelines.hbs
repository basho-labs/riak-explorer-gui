<div class="alert alert-info">
  For more information on querying, check out our <a target="_blank" href="http://docs.basho.com/riak/ts/1.3.0/using/querying/" target="_blank">docs</a>.
</div>

<h2>Basic Querying</h2>

<p>You query data via columns. There are three categories of column, each with a different set of rules for valid queries. Query columns are based on rows in your TS table.</p>

<pre>CREATE TABLE tab2
(
  a SINT64 NOT NULL,
  b TIMESTAMP NOT NULL,
  c BOOLEAN NOT NULL,
  PRIMARY KEY(
    (a, QUANTUM(b, 1, 's'))&lt;-Partition Key, a,b,c&lt;-Local Key
  )
)</pre>

<h3>Partition Key</h3>

<p>All queries must cover the partition key.</p>

<p>The query must use greater than and less than (>, >=, &lt;, &lt;=).</p>

<p>The timestamp in the partition key is an integer (in milliseconds) that must be compared either as a fully-enclosed range or as an exact match.</p>

<ul>
  <li>Valid: <code>time &gt; 1449864277000 and time &lt; 1449864290000</code></li>
  <li>Invalid: <code>time &gt; 1449864277000</code></li>
  <li>Invalid: <code>time &gt; 1449864277000 or time &lt; 1449864290000</code></li>
</ul>

<h3>Local Key</h3>

<p>Column names that are in the local key but not in the partition key are not required for the query.</p>

<pre>PRIMARY KEY ((a,b),a,b,c)</pre>

<p>Here 'c' is in the local key only so does not have to be in the query.</p>

<p>Column names from the local key must be compared using strict equality against literal values. No ranges are permitted, <code>!=</code> must not be used, and <code>or</code> will not work.</p>

<ul>
  <li>Valid: <code>country_code = 'uk'</code></li>
  <li>Invalid: <code>(country_code = 'uk' or country_code = 'de')</code></li>
  <li>Invalid: <code>country_code != 'se'</code></li>
  <li>Invalid: <code>temperature &lt; 85.0</code></li>
</ul>

<h3>Column Definitions</h3>

<p><a href="http://docs.basho.com/riak/ts/1.3.0/using/planning/#column-definitions" target="_blank">Column definitions</a> may be queried with unbounded ranges, <code>!=</code>, and <code>or</code> comparisons.</p>

<h3>General Guidelines</h3>

<p>Before you begin querying, there are some guidelines to keep in mind.</p>

<ul>
  <li>Columns may not be compared against other columns in the query.</li>
  <li>When using <code>or</code>, you must surround the expression with parentheses or your query will return an error.</li>
</ul>

<p>Basic queries return the full range of values between two given times for an instance within a class or type of data. To demonstrate, we'll use the same example table, in which the <code>state</code> is an instance within the <code>region</code>:</p>

<pre>CREATE TABLE GeoCheckin
(
  region       VARCHAR   NOT NULL,
  state        VARCHAR   NOT NULL,
  time         TIMESTAMP NOT NULL,
  weather      VARCHAR NOT NULL,
  temperature  DOUBLE,
  PRIMARY KEY (
    (region, state, QUANTUM(time, 15, 'm')),
    region, state, time
  )
)</pre>

<p>Your query must include all components of the partition key. If any part of the partition key is missing, you will get an error.</p>

<h2>Advanced Querying By Column</h2>

<h3>Select Query</h3>

<p>You can select particular columns from the data to query:</p>

<pre>select weather, temperature from GeoCheckin where time &gt; 1234560 and time &lt; 1234569 and region = 'South Atlantic' and state = 'South Carolina'</pre>

<h3>Extended Query</h3>

<p>You can extend the query beyond the primary key and use secondary columns to filter results. In this example, we are extending our query to filter based on <code>temperature</code>:</p>

<pre>select weather, temperature from GeoCheckin where time &gt; 1234560 and time &lt; 1234569 and region = 'South Atlantic' and state = 'South Carolina' and temperature &gt; 27.0</pre>

<p>You can also use <code>or</code> when querying against column values, such as <code>temperature</code> in our example. Note that the parentheses are required:</p>

<pre>select weather, temperature from GeoCheckin where time &gt; 1234560 and time &lt; 1234569 and region = 'South Atlantic' and state = 'South Carolina' and (temperature &gt; 27.0 or temperature &lt; 0.0)</pre>

<p>You cannot use <code>or</code> between two complete clauses, since keys cannot be specified twice.</p>

<h3>SQL Injection</h3>

<p>When querying with user-supplied data, it is essential that you protect against SQL injection. Please verify the user-supplied data before constructing queries.</p>

<h2>SQL Support</h2>

<p>A small subset of SQL is supported. The following operators are supported for each data type:</p>
<table>
  <thead>
  <tr>
    <td></td>
    <td><code>=</code></td>
    <td><code>!=</code></td>
    <td><code>&lt;</code></td>
    <td><code>&lt;=</code></td>
    <td><code>>=</code></td>
  </tr>
  </thead>
  <tbody>
  <tr>
    <td><code>varchar</code></td>
    <td><code>x</code></td>
    <td><code>x</code></td>
    <td><code></code></td>
    <td><code></code></td>
    <td><code></code></td>
  </tr>
  <tr>
    <td><code>boolean</code></td>
    <td><code>x</code></td>
    <td><code>x</code></td>
    <td><code></code></td>
    <td><code></code></td>
    <td><code></code></td>
  </tr>
  <tr>
    <td><code>sint64</code></td>
    <td><code>x</code></td>
    <td><code>x</code></td>
    <td><code>x</code></td>
    <td><code>x</code></td>
    <td><code>x</code></td>
  </tr>
  <tr>
    <td><code>double</code></td>
    <td><code>x</code></td>
    <td><code>x</code></td>
    <td><code>x</code></td>
    <td><code>x</code></td>
    <td><code>x</code></td>
  </tr>
  <tr>
    <td><code>timestamp</code></td>
    <td><code>x</code></td>
    <td><code>x</code></td>
    <td><code>x</code></td>
    <td><code>x</code></td>
    <td><code>x</code></td>
  </tr>
  </tbody>
</table>

<h3>Limitations</h3>

<ul>
  <li>Column to column comparisons are not currently supported.</li>
  <li>Secondary indexing (2i) will not work with Riak TS.</li>
  <li>Riak Search will not work with Riak TS.</li>
  <li>Queries are limited by the number of quanta they can span when specifying the time limits.</li>
</ul>

<h4>Quanta query range</h4>

<p>A query covering more than a certain number of quanta (5 by default) will generate too many sub-queries and the query system will refuse to run it. Assuming a default quantum of 15 minutes, the maximum query time range is 75 minutes.</p>

<p>In the below example we set a quantum of 15s:</p>

<pre>CREATE TABLE GeoCheckin
(
  geohash VARCHAR NOT NULL,
  location VARCHAR NOT NULL,
  user VARCHAR NOT NULL,
  time TIMESTAMP NOT NULL,
  weather VARCHAR NOT NULL,
  temperature VARCHAR,
  PRIMARY KEY(
    (location, user, QUANTUM(time, 15, 's')),
    location, user, time
  )
)</pre>

<p>The maximum time range we can query is 60s, anything beyond will fail.</p>

<p>See the Data Modeling section in <a href="http://docs.basho.com/riak/ts/1.3.0/learn-about/tablearchitecture/" target="_blank">Table Architecture</a> for more information.</p>

<h4>Leap seconds and quantum boundaries</h4>

<p>
  Periodically <a href="https://en.wikipedia.org/wiki/Leap_second" target="_blank">leap seconds</a>
  are announced. These are inserted at the end of one day (in UTC).
</p>

<p>UNIX treats them as one double-length second. For example, at the end of 1998 a second was added:</p>

<pre>Date         Time of day   UNIX time
1998-12-31   23:59:58      915148798
1998-12-31   23:59:59      915148799
1998-12-31   23:59:60      915148800     &lt;== Artificial leap second
1999-01-01   00:00:00      915148800</pre>

<p>Effectively, there is no way in the UNIX time scheme to differentiate an event that occurred during the extra second at the end of 1998 to something that occurred the first second of 1999.</p>

<p>Similarly, Riak TS would treat <code>915148800</code> as the start of a new time quantum, and any data points which a client added for that second would be considered to be in the first time quantum in 1999.</p>

<p>The data is not lost, but a query against 1998 time quanta will not produce those data points despite the fact that some of the events flagged as <code>915148800</code> technically occurred in 1998.</p>

<h2>Querying Tables</h2>

<h3>Query a table with SQL</h3>

<p>Query a table by issuing a SQL statement against the table. Your query MUST include a 'where' clause with all components.</p>

<h3>Query a table definition</h3>

<p>You can now query a table definition with the <code>DESCRIBE</code> table query which returns the table's information in rows and columns.</p>

<p>For example:</p>

<pre>DESCRIBE GeoCheckin</pre>

<p>Returns:</p>

<pre>Column      | Type      | Is Null | Partition Key | Local Key
region      | varchar   | false   | 1             | 1
state       | varchar   | false   | 2             | 2
time        | timestamp | false   | 3             | 3
weather     | varchar   | false   | null          | null
temperature | double    | false   | null          | null</pre>